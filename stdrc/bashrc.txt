#! /usr/bin/env bash

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, overwrite the one in /etc/profile)
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '

# Commented out, don't overwrite xterm -T "title" -n "icontitle" by default.
# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'
#    ;;
#*)
#    ;;
#esac

# enable bash completion in interactive shells
#if ! shopt -oq posix; then
#  if [ -f /usr/share/bash-completion/bash_completion ]; then
#    . /usr/share/bash-completion/bash_completion
#  elif [ -f /etc/bash_completion ]; then
#    . /etc/bash_completion
#  fi
#fi

# sudo hint
if [ ! -e "$HOME/.sudo_as_admin_successful" ] && [ ! -e "$HOME/.hushlogin" ] ; then
    case " $(groups) " in *\ admin\ *|*\ sudo\ *)
    if [ -x /usr/bin/sudo ]; then
	cat <<-EOF
	To run a command as administrator (user "root"), use "sudo <command>".
	See "man sudo_root" for details.
	
	EOF
    fi
    esac
fi

# if the command-not-found package is installed, use it
if [ -x /usr/lib/command-not-found -o -x /usr/share/command-not-found/command-not-found ]; then
	function command_not_found_handle {
	        # check because c-n-f could've been removed in the meantime
                if [ -x /usr/lib/command-not-found ]; then
		   /usr/lib/command-not-found -- "$1"
                   return $?
                elif [ -x /usr/share/command-not-found/command-not-found ]; then
		   /usr/share/command-not-found/command-not-found -- "$1"
                   return $?
		else
		   printf "%s: command not found\n" "$1" >&2
		   return 127
		fi
	}
fi



shopt -s checkwinsize

# Determine OS platform
UNAME=$(uname | tr "[:upper:]" "[:lower:]")
# If Linux, try to determine specific distribution
if [ "$UNAME" == "linux" ]; then
    # If available, use LSB to identify distribution
    if [ -f /etc/lsb-release -o -d /etc/lsb-release.d  ]; then
        export DISTRO=$(cat /etc/os-release /etc/os-release |grep -Po '(CentOS|Ubuntu|Debian)'|head -n 1)
        # Otherwise, use release info file
    else
        export DISTRO=$(cat /etc/system-release | cut -d\  -f 1)
    fi
    DISTRO=$(echo $DISTRO|tr "[:upper:]" "[:lower:]")
fi

# For everything else (or if above failed), just use generic identifier
[ "$DISTRO" == "" ] && export DISTRO=$UNAME
unset UNAME

export BASH_THEME=$HOME/.std/.zcolor.sh
if [[ -f $BASH_THEME  ]]; then
    export DEFAULT_USER=`whoami`
    source $BASH_THEME
fi

# Runs prompt (this bypasses bash_it $PROMPT setting)
 
# User specific aliases and functions
alias rm='rm -i'
alias cp='cp -i'
alias mv='mv -i'
alias clean_pyc='find . -regex ".*pyc" -exec rm {} -rf \;'
alias ls="ls --time-style=iso --color=auto"
alias ll="ls --time-style=iso --color -al"
alias grep='grep --color=auto'
alias grepconf='grep -P "^[^#].+"'

alias ipy="python -c 'import IPython; IPython.terminal.ipapp.launch_new_instance()'"

# alias for repos 
alias stmux="TERM=screen-256color tmux -f $HOME/.std/.tmux.conf"
alias svim="vim -u $HOME/.std/.vimrc"
alias snpm="npm --registry=https://registry.npm.taobao.org --cache=$HOME/.npm/.cache/cnpm --disturl=https://npm.taobao.org/dist --userconfig=$HOME/.cnpmrc"
alias spip="pip -i https://pypi.douban.com/simple"
alias ..="cd .."
alias ...="cd ../.."

# alias for grepcode.cn

shopt -s histappend
#PROMPT_COMMAND="history -a;$PROMPT_COMMAND"
HISTSIZE=65535
HISTTIMEFORMAT=`echo -e ${red}[%F %T] ${normal}`


# The next line updates PATH for the Google Cloud SDK.
if [ -f "/usr/local/google-cloud-sdk/path.bash.inc" ]; then source "/usr/local/google-cloud-sdk/path.bash.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "/usr/local/google-cloud-sdk/completion.bash.inc" ]; then source "/usr/local/google-cloud-sdk/completion.bash.inc"; fi


# alias for stdrc update
alias stdupdate='>md5sum.txt ; for i in *; do [ -f $i  ] && md5sum $i >> md5sum.txt ; done'

# std* functions
stdinit() {

    IPINFO=$(curl https://api.myip.com 2>/dev/null)
    IPINFO_IP=$(echo "$IPINFO"|grep -oP '\d+\.\d+\.\d+\.\d+')
    IPINFO_CC=$(echo "$IPINFO"|grep -oP '(?<="cc":")\w*')

    if [ "$IPINFO_CC" == "CN" ]; then
        STATIC_HOST="https://www.grepcode.cn"
    else
        STATIC_HOST="https://www.grepcode.cn"
        #STATIC_HOST="https://stdhi.github.io"
    fi

    STATIC_HOST="https://www.grepcode.cn"
    SUM_FILE="md5sum.txt"

    if [ ! -d $HOME/.std ];
    then
        echo -e "mkdir $HOME/.std directory ...\n"
        mkdir -p $HOME/.std > /dev/null 2>&1
    fi

    if [ ! -d $HOME/.std/bin ];
    then
        echo -e "mkdir $HOME/.std/bin directory ...\n"
        mkdir -p $HOME/.std/bin > /dev/null 2>&1
    fi

    if [ "$2" == "init_etcd" ]
    then
        f_init_etcd
        return 0
    fi

    if [ "$2" == "init_ca" ]
    then
        sudo sh -c "curl $STATIC_HOST/certs/StdCA.crt > /etc/ssl/certs/StdCA.crt"
        return 0
    fi
      
    echo -e "download $SUM_FILE file ...\n"
    curl $STATIC_HOST/stdrc/$SUM_FILE > $HOME/.std/$SUM_FILE 2>/dev/null

    local rcfiles=$(cat $HOME/.std/$SUM_FILE | grep 'txt' | awk '{print $2}')
    if [ "$1" == 'clean' ]; then
        for i in ${rcfiles[@]}; 
        do
            # remove current files
            rm -rf $HOME/.std/.${i%.txt}
            rm -rf $HOME/.std/.vim 
            rm -rf $HOME/.std/bin
            rm -rf $HOME/.std/vim.tar.gz

            # recover the backup
            #if [ -f $HOME/.${i%.txt}.xbak ]; then
            #    mv -f $HOME/.${i%.txt}.xbak $HOME/.${i%.txt}
            #fi
        done
        return 0
    fi

    for i in ${rcfiles[@]}; do
        # check the rc file and mv to backup
        local cur_file_md5sum=$(cat $HOME/.std/$SUM_FILE | grep $i | awk '{print $1}')
        local old_file_md5sum=$(md5sum $HOME/.std/.${i%.txt} | awk '{print $1}')
        if [ "$cur_file_md5sum" == "$old_file_md5sum" ];
        then
            echo -e "skip download ${i%.txt} \n"
            continue
        fi
        if [ -f $HOME/.std/.${i%.txt} ]; then
            echo -e "rm .std/.${i%.txt} \n"
            rm -f $HOME/.std/.${i%.txt}
        fi
        # curl the txt files from cdn
        echo -e "download ${i%.txt} ...\n"
        curl $STATIC_HOST/stdrc/$i > $HOME/.std/.${i%.txt}
    done

    local cur_md5_vim=$(cat $HOME/.std/$SUM_FILE | grep 'gz' | awk '{print $1}')
    local old_md5_vim=$(md5sum $HOME/.std/vim.tar.gz | awk '{print $1}')
    if [ "$cur_md5_vim" == "$old_md5_vim" ];
    then
        echo -e "skip vim.tar.gz\n"
    else
        echo -e "download vim.tar.gz ...\n"
        curl $STATIC_HOST/stdrc/vim.tar.gz > $HOME/.std/vim.tar.gz
        echo -e "rm -rf $HOME/.std/.vim\n"
        rm "$HOME/.std/.vim" -rf
    fi

    mkdir $HOME/.std/ -p
    tar xfz $HOME/.std/vim.tar.gz -C $HOME/.std/

    ln $HOME/.std/.bashrc $HOME/.bashrc -sf

    echo -e "download bin files ...\n"
    curl $STATIC_HOST/scripts/md5sum.txt > $HOME/.std/bin/md5sum.txt 2>/dev/null

    local binfiles=$(cat $HOME/.std/bin/md5sum.txt | awk '{print $2}')

    for i in ${binfiles[@]}; do
        # check the rc file and mv to backup
        local cur_file_md5sum=$(cat $HOME/.std/bin/md5sum.txt | grep $i | awk '{print $1}')
        local old_file_md5sum=$(md5sum $HOME/.std/bin/$i | awk '{print $1}')
        if [ "$cur_file_md5sum" == "$old_file_md5sum" ];
        then
            echo -e "skip download ${i} \n"
            continue
        fi
        if [ -f $HOME/.std/bin/$i ]; then
            echo -e "rm $HOME/.std/bin/$i \n"
            rm -f $HOME/.std/bin/$i
        fi
        # curl the txt files from cdn
        echo -e "download $i ...\n"
        curl $STATIC_HOST/scripts/$i > $HOME/.std/bin/$i
    done

    chmod +x $HOME/.std/bin/*

    return 0
}

sdig() {
    if [ "$1" == "info" ]; then
        curl "https://t.grepcode.cn/dig_info" 2>/dev/null
        return
    fi
    if [ -n "$1" ] && [ -n "$2" ] && [ -n "$3" ]; then
        curl "https://t.grepcode.cn/dig?domain=$1&dns=$2&_fmt=$3" 2>/dev/null
    elif [ -n "$1" ] && [ -n "$2" ] ; then
        curl "https://t.grepcode.cn/dig?domain=$1&dns=$2&_fmt=text" 2>/dev/null
    elif [ -n "$1" ] ; then
        curl "https://t.grepcode.cn/dig?domain=$1&dns=0@CN&_fmt=text" 2>/dev/null
    fi
}

stdspeed() {
    IPINFO=$(curl https://api.myip.com 2>/dev/null)
    IPINFO_IP=$(echo "$IPINFO"|grep -oP '\d+\.\d+\.\d+\.\d+')
    IPINFO_CC=$(echo "$IPINFO"|grep -oP '(?<="cc":")\w*')

    if [ "$IPINFO_CC" == "CN" ]; then
        STATIC_HOST="https://www.grepcode.cn"
    else
        STATIC_HOST="https://stdhi.github.io"
    fi

    STATIC_HOST="https://www.grepcode.cn"

    if [ $1 == 'stdout']; then
        perl -e 'while (<>) {$l++;if (time > $e) {$e=time;print "$l\n";$l=0}}'
        return 0
    fi
    echo 'usage: stdspeed [stdout]'
    return 0

}

stdwhois() {
  whois -h $(whois -h whois.iana.org ${1##*.} |   egrep -e '^whois:' |   sed -e 's/[[:space:]][[:space:]]*/ /g' |   cut -d " " -f 2) $1
}

stdpass() {
    if [ "$2" ]; 
    then
        echo $(head -n 128 /dev/urandom |tr -dc $2|cut -b 1-$1)
        return 0
    fi
    if [ "$1" ];
    then
        echo $(head -n 128 /dev/urandom |tr -dc 'a-zA-Z0-9'|cut -b 1-$1)
        return 0
    fi
    echo "usage: stdpass [count] [alphabet:a-zA-Z0-9]"
    return 0
}

stdss() {
    if [ "$1" == "config" ];
    then
        read -e -p "proxy-port:" -i 5030 port
        read -e -s -p "proxy-pass:" -i "ss@grepcode.cn" pass
        echo ""
        read -e -p "hash-method:" -i "aes-256-cfb" method
        read -e -p "domain:" -i "gcloud.grepcode.cn" domain
        echo "generate from $method:******@$domain:$port"
        echo "aes-256-cfb:$pass@$domain:$port" | echo "ss://""$(base64 -w 0)"
        return 0
    fi
}

# git 相关俚语
#alias sgit="git -c http.proxy=socks5://hm.grepcode.cn:5080 -c http.sslVerify=False "

stdd () {

    if [ $STDEBUG ]; then
        true
    fi

    if [ "$1" == "tags" ];
    then
        wget -q https://registry.hub.docker.com/v1/repositories/$2/tags -O -  | sed -e 's/[][]//g' -e 's/"//g' -e 's/ //g' | tr '}' '\n'  | awk -F: '{print $3}'
        return 0
    fi

    if [ "$1" == "login" ];
    then
        if [ "$#" == "1" ];
        then
            echo "usage: stdd login [aliyun|aws|*]"
            return 0
        fi
        if [ "$2" == "aliyun" ];
        then
            sudo docker login registry.cn-hangzhou.aliyuncs.com
        fi
        return 0
    fi

    echo "usage: stdd [login|tags]"
}

PATH=$PATH:~/.std/bin
